// Copyright 2025 Yuta Takahashi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file sapphillon/v1/workflow_service.proto (package sapphillon.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Status } from "../../google/rpc/status_pb";
import { file_google_rpc_status } from "../../google/rpc/status_pb";
import type { Workflow, WorkflowResult } from "./workflow_pb";
import { file_sapphillon_v1_workflow } from "./workflow_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sapphillon/v1/workflow_service.proto.
 */
export const file_sapphillon_v1_workflow_service: GenFile = /*@__PURE__*/
  fileDesc("CiRzYXBwaGlsbG9uL3YxL3dvcmtmbG93X3NlcnZpY2UucHJvdG8SDXNhcHBoaWxsb24udjEiKQoXR2VuZXJhdGVXb3JrZmxvd1JlcXVlc3QSDgoGcHJvbXB0GAEgASgJInQKGEdlbmVyYXRlV29ya2Zsb3dSZXNwb25zZRI0ChN3b3JrZmxvd19kZWZpbml0aW9uGAEgASgLMhcuc2FwcGhpbGxvbi52MS5Xb3JrZmxvdxIiCgZzdGF0dXMYAiABKAsyEi5nb29nbGUucnBjLlN0YXR1cyJGChJGaXhXb3JrZmxvd1JlcXVlc3QSGwoTd29ya2Zsb3dfZGVmaW5pdGlvbhgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCSKNAQoTRml4V29ya2Zsb3dSZXNwb25zZRI6ChlmaXhlZF93b3JrZmxvd19kZWZpbml0aW9uGAEgASgLMhcuc2FwcGhpbGxvbi52MS5Xb3JrZmxvdxIWCg5jaGFuZ2Vfc3VtbWFyeRgCIAEoCRIiCgZzdGF0dXMYAyABKAsyEi5nb29nbGUucnBjLlN0YXR1cyJKChJSdW5Xb3JrZmxvd1JlcXVlc3QSNAoTd29ya2Zsb3dfZGVmaW5pdGlvbhgBIAEoCzIXLnNhcHBoaWxsb24udjEuV29ya2Zsb3cicQoTUnVuV29ya2Zsb3dSZXNwb25zZRI2Cg93b3JrZmxvd19yZXN1bHQYASABKAsyHS5zYXBwaGlsbG9uLnYxLldvcmtmbG93UmVzdWx0EiIKBnN0YXR1cxgCIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzMqYCCg9Xb3JrZmxvd1NlcnZpY2USZQoQR2VuZXJhdGVXb3JrZmxvdxImLnNhcHBoaWxsb24udjEuR2VuZXJhdGVXb3JrZmxvd1JlcXVlc3QaJy5zYXBwaGlsbG9uLnYxLkdlbmVyYXRlV29ya2Zsb3dSZXNwb25zZTABElYKC0ZpeFdvcmtmbG93EiEuc2FwcGhpbGxvbi52MS5GaXhXb3JrZmxvd1JlcXVlc3QaIi5zYXBwaGlsbG9uLnYxLkZpeFdvcmtmbG93UmVzcG9uc2UwARJUCgtSdW5Xb3JrZmxvdxIhLnNhcHBoaWxsb24udjEuUnVuV29ya2Zsb3dSZXF1ZXN0GiIuc2FwcGhpbGxvbi52MS5SdW5Xb3JrZmxvd1Jlc3BvbnNlYgZwcm90bzM", [file_google_rpc_status, file_sapphillon_v1_workflow]);

/**
 * Request to generate a workflow from a natural language prompt.
 *
 * @generated from message sapphillon.v1.GenerateWorkflowRequest
 */
export type GenerateWorkflowRequest = Message<"sapphillon.v1.GenerateWorkflowRequest"> & {
  /**
   * Natural language prompt describing the desired workflow.
   * Example: "Check the weather, and if it's raining, send me a notification."
   * Behavior: Required; must be non-empty.
   *
   * @generated from field: string prompt = 1;
   */
  prompt: string;
};

/**
 * Describes the message sapphillon.v1.GenerateWorkflowRequest.
 * Use `create(GenerateWorkflowRequestSchema)` to create a new message.
 */
export const GenerateWorkflowRequestSchema: GenMessage<GenerateWorkflowRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_v1_workflow_service, 0);

/**
 * Server-streamed response containing the generated workflow definition.
 * Each streamed message may be partial; the client should merge or replace as appropriate.
 *
 * @generated from message sapphillon.v1.GenerateWorkflowResponse
 */
export type GenerateWorkflowResponse = Message<"sapphillon.v1.GenerateWorkflowResponse"> & {
  /**
   * Structured workflow definition.
   *
   * @generated from field: sapphillon.v1.Workflow workflow_definition = 1;
   */
  workflowDefinition?: Workflow;

  /**
   * The status of the response.
   * If the status is not OK, it indicates an error.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.v1.GenerateWorkflowResponse.
 * Use `create(GenerateWorkflowResponseSchema)` to create a new message.
 */
export const GenerateWorkflowResponseSchema: GenMessage<GenerateWorkflowResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_v1_workflow_service, 1);

/**
 * Request to fix a workflow definition using a problem description.
 *
 * @generated from message sapphillon.v1.FixWorkflowRequest
 */
export type FixWorkflowRequest = Message<"sapphillon.v1.FixWorkflowRequest"> & {
  /**
   * The workflow definition to be fixed.
   * Format: JSON, YAML, or another structured text representation.
   * Behavior: Required; must be parseable by the service.
   *
   * @generated from field: string workflow_definition = 1;
   */
  workflowDefinition: string;

  /**
   * Description of issues to fix or constraints to apply.
   * Example: "Step IDs must be unique; add retry to notification step."
   * Behavior: Required; must be non-empty.
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message sapphillon.v1.FixWorkflowRequest.
 * Use `create(FixWorkflowRequestSchema)` to create a new message.
 */
export const FixWorkflowRequestSchema: GenMessage<FixWorkflowRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_v1_workflow_service, 2);

/**
 * Server-streamed response carrying fixed workflow definitions and a change summary.
 * The final message typically represents the complete fixed definition.
 *
 * @generated from message sapphillon.v1.FixWorkflowResponse
 */
export type FixWorkflowResponse = Message<"sapphillon.v1.FixWorkflowResponse"> & {
  /**
   * The fixed workflow definition.
   *
   * @generated from field: sapphillon.v1.Workflow fixed_workflow_definition = 1;
   */
  fixedWorkflowDefinition?: Workflow;

  /**
   * Summary of changes applied to produce the fixed definition.
   * Example: "Renamed duplicate step IDs; added retry policy to 'notify'."
   *
   * @generated from field: string change_summary = 2;
   */
  changeSummary: string;

  /**
   * The status of the response.
   * If the status is not OK, it indicates an error.
   *
   * @generated from field: google.rpc.Status status = 3;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.v1.FixWorkflowResponse.
 * Use `create(FixWorkflowResponseSchema)` to create a new message.
 */
export const FixWorkflowResponseSchema: GenMessage<FixWorkflowResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_v1_workflow_service, 3);

/**
 * Request to run a workflow.
 * Contains the workflow definition to be executed.
 *
 * @generated from message sapphillon.v1.RunWorkflowRequest
 */
export type RunWorkflowRequest = Message<"sapphillon.v1.RunWorkflowRequest"> & {
  /**
   * The workflow definition to run.
   *
   * @generated from field: sapphillon.v1.Workflow workflow_definition = 1;
   */
  workflowDefinition?: Workflow;
};

/**
 * Describes the message sapphillon.v1.RunWorkflowRequest.
 * Use `create(RunWorkflowRequestSchema)` to create a new message.
 */
export const RunWorkflowRequestSchema: GenMessage<RunWorkflowRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_v1_workflow_service, 4);

/**
 * Response after running a workflow.
 * Contains the result of the workflow execution and status.
 *
 * @generated from message sapphillon.v1.RunWorkflowResponse
 */
export type RunWorkflowResponse = Message<"sapphillon.v1.RunWorkflowResponse"> & {
  /**
   * The result of the workflow execution.
   *
   * @generated from field: sapphillon.v1.WorkflowResult workflow_result = 1;
   */
  workflowResult?: WorkflowResult;

  /**
   * The status of the response.
   * If the status is not OK, it indicates an error.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.v1.RunWorkflowResponse.
 * Use `create(RunWorkflowResponseSchema)` to create a new message.
 */
export const RunWorkflowResponseSchema: GenMessage<RunWorkflowResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_v1_workflow_service, 5);

/**
 * Generates and fixes structured workflow definitions from natural language descriptions.
 * Methods stream partial outputs to allow progressive rendering in UIs and long-running processing.
 *
 * @generated from service sapphillon.v1.WorkflowService
 */
export const WorkflowService: GenService<{
  /**
   * Generates a workflow from a natural language prompt.
   * 
   * Behavior:
   * - Server-streaming RPC that emits partial or incremental workflow definitions.
   * - The client should read until the stream completes to obtain the final definition.
   * 
   * Responses:
   * - Each message may represent a partial draft or an updated full definition.
   * 
   * Errors:
   * - INVALID_ARGUMENT if the prompt is empty or malformed.
   * - INTERNAL for unexpected generation errors.
   *
   * @generated from rpc sapphillon.v1.WorkflowService.GenerateWorkflow
   */
  generateWorkflow: {
    methodKind: "server_streaming";
    input: typeof GenerateWorkflowRequestSchema;
    output: typeof GenerateWorkflowResponseSchema;
  },
  /**
   * Fixes an existing workflow definition using a description of issues.
   * 
   * Behavior:
   * - Server-streaming RPC that emits suggested fixes and updated definitions incrementally.
   * - The final message in the stream typically represents the fully fixed definition.
   * 
   * Errors:
   * - INVALID_ARGUMENT if workflow_definition or description is empty.
   * - FAILED_PRECONDITION if the definition cannot be parsed.
   * - INTERNAL for unexpected processing errors.
   *
   * @generated from rpc sapphillon.v1.WorkflowService.FixWorkflow
   */
  fixWorkflow: {
    methodKind: "server_streaming";
    input: typeof FixWorkflowRequestSchema;
    output: typeof FixWorkflowResponseSchema;
  },
  /**
   * Runs a workflow based on the provided definition.
   *
   * @generated from rpc sapphillon.v1.WorkflowService.RunWorkflow
   */
  runWorkflow: {
    methodKind: "unary";
    input: typeof RunWorkflowRequestSchema;
    output: typeof RunWorkflowResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sapphillon_v1_workflow_service, 0);

